(Question 1)

import random
import string

LIMIT_RECURSION = 3


def program():
    return f"int main() {{ {create_stat_list(0)} return 0; }}"


def create_stat_list(depth):
    if depth >= LIMIT_RECURSION:
        return create_assgn_stat()

    first_statement = create_stat(depth + 1)
    second_statement = create_stat(depth + 1)
    return first_statement + second_statement


def create_stat(depth):
    if depth >= LIMIT_RECURSION:
        return create_assgn_stat()

    return random.choice([create_cmpd_stat, create_if_stat, create_iter_stat,
                         lambda d: create_assgn_stat(), create_decl_stat])(depth)


def create_cmpd_stat(depth):
    return f"{{ {create_stat_list(depth + 1)} }}"


def create_if_stat(depth):

    return random.choice([
        f"if ({create_expression()}) {create_stat(depth + 1)}",
        f"if ({create_expression()}) {create_cmpd_stat(depth + 1)}",
        f"if ({create_expression()}) {create_stat(depth + 1)} else {create_stat(depth + 1)}",
        f"if ({create_expression()}) {create_cmpd_stat(depth + 1)} else {create_stat(depth + 1)}",
        f"if ({create_expression()}) {create_stat(depth + 1)} else {create_cmpd_stat(depth + 1)}",
        f"if ({create_expression()}) {create_cmpd_stat(depth + 1)} else {create_cmpd_stat(depth + 1)}",
    ])


def create_iter_stat(depth):

    body = create_stat(depth + 1) if random.choice([True, False]) else create_cmpd_stat(depth + 1)
    return f"while ({create_expression()}) {body}"


def create_assgn_stat():
    return f"{create_id()} = {create_expression()};"


def create_decl_stat(depth):
    var_type = define_type()
    var_name = create_id()
    return random.choice([
        f"{var_type} {var_name};",
        f"{var_type} {var_name} = {create_expression()};"
    ])


def create_expression():
    if random.random() > 0.5:
        return f"{random.choice([create_id(), create_const()])} {create_operator()}"
    else:
        return random.choice([create_id(), create_const()])


def define_type():
    return random.choice(["int", "float"])


def create_operator():
    return random.choice(["+", "-", "*", "/"])


def create_id():
    first_char = str(random.choice(string.ascii_letters + "_"))
    remaining_chars = ''.join(random.choice(list(string.ascii_letters + string.digits + "_")) for _ in range(2))
    return first_char + remaining_chars


def create_const():
    constant = str(random.choice(string.digits)) + ''.join(random.choice(list(string.digits)) for _ in range(2))
    return constant


if __name__ == "__main__":
    code = program()
    with open("generatedCode.cpp", "w") as f:
        f.write(code)
        f.close()

(Question 2)

Generated Code #1

int main() {
  if (hso)
    float KHy = 771;
  else
    while (243 / gik) {
      XdJ = 273 * 090;
      CnN = eEF + 226;
    }
  int JfX = 815 + 020;
  return 0;
}


Generated Code #2

int main() {
  while (108 - tuG)
    dKv = www;
  while (266)
    if (285 + IyT) {
      bVB = mLi + NQB;
      sNH = 794;
    }
  return 0;
}

Some of the issues or errors in the generated C++ code is that while syntactically correct the meaning that the program conveys
or the semantics is illogically wrong. For example, we have declared but uninitialized variables in control and loop structures
which should occupy values that convey meaning and parallel operands with those with which are involved within the operation itself.
The other error is that although certain values are initialized to their variables the value is not representative of its type. Moreover,
the generated code can lead to issues where it would not be able to render the entire code sets based on their uniform probabilities of
generating specific fragments of code. For example, a compound statement contains more code than an assignment or declarative statement, and
generally their probabilities could be altered so that the generated code does not lead to an exception where the storage or number of
bytes allocated in memory is insufficient to hold such large values or expressions. Also, the calculations in the expressions do not
follow the correct order of operations as there are no parentheses which could lead to operator exceptions. In this generated code we also
have undefined and uninitialized variables that can lead to compilation errors. An error with stack overflow or recursion depth errors
as a cause of not having specific terminating conditions or in expressions within iterations that do not have well-defined behavior
can lead to ambiguity for the compiler to deduce the logical sequence of execution.
