#include<stdio.h>
#include <inttypes.h>
#include <stdlib.h>
#include <string.h>

typedef enum {
    A = 4,
    B = 3,
    C = 2,
    D = 1,
    F = 0
} LetterGrade;

double getArrayAverage(int *arr, int size) {
    double sum = 0;
    for (int i = 0; i < size; i++) {
        sum += (double) arr[i];
    }
    return sum > 0 ? sum / size : 0;
}

void convertCharToLetterGrade(char *grade) {
    switch(*grade) {
        case 'a' : case 'A':
            *grade = 4;
            return;
        case 'b' : case 'B':
            *grade = 3;
            return;
        case 'c' : case 'C':
            *grade = 2;
            return;
        case 'd' : case 'D':
            *grade = 1;
            return;
        case 'f' : case 'F':
            *grade = 0;
            return;
        default:
            printf("Warning... Invalid Character... Recording an F.\n");
    }
}

 LetterGrade getLetterGradeFromAverage(const double avg) {
    if (avg >= 90) {
        return A;
    } else if (avg >= 80) {
        return B;
    } else if (avg >= 70) {
        return C;
    } else if (avg >= 60) {
        return D;
    } else {
        return F;
    }
}

int main() {

    char firstName[40];
    printf("Please enter your first name: ");
    scanf("%s", firstName);

    char lastName[40];
    printf("Please enter your last name: ");
    scanf("%s", lastName);

    // fixed integer width type same in C
    int32_t numPrevCourses;
    printf("Enter number of previous courses: ");
    scanf("%i", &numPrevCourses);

    while (getchar() != '\n') continue;

    // type cast the pointer to LetterGrade to be more explicit
    LetterGrade *prevGrades = (LetterGrade*) malloc(numPrevCourses * sizeof(LetterGrade)); // total size in bytes

    for (int32_t courseIdx = 0; courseIdx < numPrevCourses; courseIdx++) {
        printf("Enter letter grade for course %i: ", courseIdx + 1);
        char letterGrade;
        scanf(" %c", &letterGrade);
        while (getchar() != '\n') continue;
        convertCharToLetterGrade(&letterGrade);
        prevGrades[courseIdx] = (LetterGrade) letterGrade;
    }

    int32_t numExams;
    printf("Enter number of exams this semester: ");
    scanf("%i", &numExams);
    while (getchar() != '\n') continue;

    int32_t *examGrades = (int32_t*) malloc(numExams * sizeof(int32_t));

    for (int32_t examIdx = 0; examIdx < numExams; examIdx++) {
        printf("Enter grade for exam %i as an integer: ", examIdx + 1);
        scanf("%i", &examGrades[examIdx]);
        while (getchar() != '\n');
    }

    char fullName[100];

    sprintf(fullName, "%s %s", firstName, lastName);

    printf("Grade Report For %s:\n", fullName);
    const double examAverage = getArrayAverage(examGrades, numExams);
    printf("Your exam average is: %.2f\n", examAverage);

    LetterGrade newLetterGrade = getLetterGradeFromAverage(examAverage);
    prevGrades = (LetterGrade*) realloc(prevGrades, (numPrevCourses + 1) * sizeof(LetterGrade));
    prevGrades[numPrevCourses] = newLetterGrade;



    const double gpa = getArrayAverage((int*)prevGrades, numPrevCourses);
    printf("Your latest GPA is: %.2f\n ", gpa);

    free(prevGrades);
    free(examGrades);

    return 0;

}

A subtle syntax difference with enums is the use of typedef, or a type definition to closely align with C++ syntax
for function types since in C the enum keyword and enum class name must be specified instead if typedef is not used.
A major feature not in C which is present in C++ are vectors. To work around this I used a pointer array using malloc to allocate
memory for values passed to the function as a dynamically allocated array. A feature that C++ uses to type cast
values is static_cast<type>(value) while in C I simply used (type) instead to type cast the value.

In the char conversion function I had to use a grade pointer in order to directly modify the value of the argument passed
to the function and then dereference the variable parameter to access the value stored at the memory location and assign
the corresponding value. Within the getLetterGradeFromAverage() function instead of using the scope resolution operator
I directly specified the letter grade from the enum.

An aspect that was difficult was allocation and dynamically reallocating memory for exam grades and previous grades arrays.
I had to manually reallocate memory into the prevGrades dynamic array by specifying its location by name and multiplication
of the size in bytes of the letter grade, in this case, and the total quantity (numPrevCourses + 1) for additional added
courses to reallocate the size of the dynamic array and account for additions or deletions if there were to be any.
